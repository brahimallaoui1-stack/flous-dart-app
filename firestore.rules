
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read public user data (like display names)
    // but can only write to their own document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth.uid == userId;
    }

    // Group access rules
    match /groups/{groupId} {
      // Any authenticated user can read a group's data.
      // This is needed to check group details before joining.
      allow read: if request.auth != null;

      // An authenticated user can create a group.
      // The user creating the group is set as the admin.
      allow create: if request.auth != null
                    && request.resource.data.admin == request.auth.uid
                    && request.resource.data.members[0] == request.auth.uid;

      // Rules for updating a group
      allow update: if request.auth != null &&
      
                    // Allow a user to join a group (add themselves to members array)
                    (request.resource.data.members == resource.data.members.concat([request.auth.uid])
                     && resource.data.members.size() < resource.data.maxMembers
                     && !(request.auth.uid in resource.data.members))
                     
                    // Allow admin to update turnOrder and status
                    || (request.auth.uid == resource.data.admin 
                        && (request.resource.data.turnOrder != resource.data.turnOrder
                            || request.resource.data.status != resource.data.status))
                            
                    // Allow current beneficiary to swap turn with someone after them
                    || (resource.data.turnOrder[resource.data.currentRound] == request.auth.uid
                        && request.resource.data.turnOrder != resource.data.turnOrder)

                    // Allow beneficiary to confirm reception
                    || (request.resource.data.receptionStatus != resource.data.receptionStatus
                        && request.auth.uid in request.resource.data.receptionStatus);

      // Only the admin can delete a group, and only if it's not 'En cours'
      allow delete: if request.auth.uid == resource.data.admin && resource.data.status == 'En attente';
    }
  }
}
