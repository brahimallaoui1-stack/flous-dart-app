rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Allow users to read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for groups collection
    match /groups/{groupId} {
      // Any authenticated user can read group data. 
      // This is needed to check group details before joining.
      allow read: if request.auth != null;

      // An authenticated user can create a group.
      // The person creating the group must be the admin.
      allow create: if request.auth != null 
                    && request.resource.data.admin == request.auth.uid
                    && request.auth.uid in request.resource.data.members;

      // Allow a user to join a group (add themselves to the members list)
      // but not change any other field.
      allow update: if request.auth != null
                    // The user must be adding themselves, not someone else.
                    && request.resource.data.members == resource.data.members.concat([request.auth.uid])
                    // The group must not be full.
                    && request.resource.data.members.size() < request.resource.data.maxMembers
                    // Ensure no other fields are being changed by the user joining.
                    && request.resource.data.name == resource.data.name
                    && request.resource.data.contribution == resource.data.contribution
                    && request.resource.data.frequency == resource.data.frequency
                    && request.resource.data.status == resource.data.status
                    && request.resource.data.admin == resource.data.admin;
      
      // The admin of the group can delete the group only if it's still pending
      allow delete: if request.auth != null 
                    && resource.data.admin == request.auth.uid
                    && resource.data.status == 'En attente';
    }
  }
}
