
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read other users' public data, but can only write to their own document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // Rules for the 'groups' collection
    match /groups/{groupId} {
      // Allow read access only to members of the group.
      allow read: if request.auth != null && request.auth.uid in resource.data.members;

      // Allow group creation for any authenticated user.
      // The 'create' operation is checked against the incoming request data.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.admin;

      // Allow updates only by members of the group under specific conditions.
      allow update: if request.auth != null && request.auth.uid in resource.data.members &&
                      (
                        // Allow admin to update any field except changing the admin.
                        (resource.data.admin == request.auth.uid && request.resource.data.admin == resource.data.admin) ||
                        // Allow a user to join a group if it's not full.
                        (request.auth.uid in request.resource.data.members && !(request.auth.uid in resource.data.members) && resource.data.members.size() < resource.data.maxMembers) ||
                        // Allow any member to update specific fields like turnOrder (swap), receptionStatus, paymentStatus.
                        (request.resource.data.turnOrder != resource.data.turnOrder ||
                         request.resource.data.receptionStatus != resource.data.receptionStatus ||
                         request.resource.data.paymentStatus != resource.data.paymentStatus)
                      );
      
      // Allow deletion only by the group's administrator and only if the group is not 'En cours' or 'TerminÃ©'.
      allow delete: if request.auth != null && request.auth.uid == resource.data.admin && resource.data.status == 'En attente';
    }
  }
}
