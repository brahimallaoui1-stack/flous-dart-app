
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read public data of other users, but only write to their own document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth.uid == userId;
    }

    // Rules for the groups collection
    match /groups/{groupId} {
      // Allow read if the user is a member of the group.
      allow read: if request.auth != null && request.auth.uid in resource.data.members;

      // Allow create for any authenticated user.
      // The user creating the group must be the admin and a member.
      allow create: if request.auth != null 
                    && request.resource.data.admin == request.auth.uid
                    && request.auth.uid in request.resource.data.members;

      // Allow update under specific conditions
      allow update: if request.auth != null && request.auth.uid in resource.data.members
                    && (
                      // Allow joining a group (adding self to members array) if not full
                      (request.resource.data.members == resource.data.members.concat([request.auth.uid])
                        && resource.data.members.size() < resource.data.maxMembers
                        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']))
                      ||
                      // Allow members to update turn order (giving turn), reception status, or group status
                      (request.resource.data.diff(resource.data).affectedKeys().hasAny(['turnOrder', 'receptionStatus', 'status']))
                    );
      
      // Allow delete only if the user is the admin of the group.
      allow delete: if request.auth != null && request.auth.uid == resource.data.admin;
    }
  }
}
